{"version":3,"file":"integrations.js","sources":["../../../src/utils/integrations.ts"],"sourcesContent":["import { hasTracingEnabled } from '@sentry/core';\nimport { BrowserTracing } from '@sentry/react';\nimport type { Integration } from '@sentry/types';\n\nimport type { GatsbyOptions } from './types';\n\ntype UserFnIntegrations = (integrations: Integration[]) => Integration[];\nexport type UserIntegrations = Integration[] | UserFnIntegrations;\n\n/**\n * Returns the integrations to add to the SDK.\n * If tracing is enabled, `BrowserTracing` is always present.\n *\n * @param options The options users have defined.\n */\nexport function getIntegrationsFromOptions(options: GatsbyOptions): UserIntegrations {\n  const isTracingEnabled = hasTracingEnabled(options);\n  if (options.integrations === undefined) {\n    return getIntegrationsFromArray([], isTracingEnabled);\n  } else if (Array.isArray(options.integrations)) {\n    return getIntegrationsFromArray(options.integrations, isTracingEnabled);\n  } else {\n    return getIntegrationsFromFunction(options.integrations, isTracingEnabled);\n  }\n}\n\n/**\n * Returns the integrations to add to the SDK, from the given integrations array.\n *\n * @param userIntegrations Array of user's integrations.\n * @param isTracingEnabled Whether the user has enabled tracing.\n */\nfunction getIntegrationsFromArray(userIntegrations: Integration[], isTracingEnabled: boolean): Integration[] {\n  if (isTracingEnabled && !userIntegrations.some(integration => integration.name === BrowserTracing.name)) {\n    userIntegrations.push(new BrowserTracing());\n  }\n  return userIntegrations;\n}\n\n/**\n * Returns the integrations to add to the SDK, from the given function.\n *\n * @param userIntegrations Function returning the user's integrations.\n * @param isTracingEnabled Whether the user has enabled tracing.\n */\nfunction getIntegrationsFromFunction(\n  userIntegrations: UserFnIntegrations,\n  isTracingEnabled: boolean,\n): UserFnIntegrations {\n  const wrapper: UserFnIntegrations = (defaultIntegrations: Integration[]) => {\n    return getIntegrationsFromArray(userIntegrations(defaultIntegrations), isTracingEnabled);\n  };\n  return wrapper;\n}\n"],"names":[],"mappings":";;;AASA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,0BAAA,CAAA,OAAA,EAAA;AACA,EAAA,MAAA,gBAAA,GAAA,iBAAA,CAAA,OAAA,CAAA,CAAA;AACA,EAAA,IAAA,OAAA,CAAA,YAAA,KAAA,SAAA,EAAA;AACA,IAAA,OAAA,wBAAA,CAAA,EAAA,EAAA,gBAAA,CAAA,CAAA;AACA,GAAA,MAAA,IAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA,YAAA,CAAA,EAAA;AACA,IAAA,OAAA,wBAAA,CAAA,OAAA,CAAA,YAAA,EAAA,gBAAA,CAAA,CAAA;AACA,GAAA,MAAA;AACA,IAAA,OAAA,2BAAA,CAAA,OAAA,CAAA,YAAA,EAAA,gBAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,wBAAA,CAAA,gBAAA,EAAA,gBAAA,EAAA;AACA,EAAA,IAAA,gBAAA,IAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,WAAA,IAAA,WAAA,CAAA,IAAA,KAAA,cAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,cAAA,EAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,OAAA,gBAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,2BAAA;AACA,EAAA,gBAAA;AACA,EAAA,gBAAA;AACA,EAAA;AACA,EAAA,MAAA,OAAA,GAAA,CAAA,mBAAA,KAAA;AACA,IAAA,OAAA,wBAAA,CAAA,gBAAA,CAAA,mBAAA,CAAA,EAAA,gBAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA,EAAA,OAAA,OAAA,CAAA;AACA;;;;"}