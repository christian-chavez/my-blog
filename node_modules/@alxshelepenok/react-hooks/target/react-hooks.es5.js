import { useEffect, useLayoutEffect, useRef, useCallback, useState } from 'react';

const useIsomorphicLayoutEffect = typeof window === "undefined" ? useEffect : useLayoutEffect;

function useEventListener(eventName, handler, element, options) {
    const savedHandler = useRef(handler);
    useIsomorphicLayoutEffect(() => {
        savedHandler.current = handler;
    }, [handler]);
    useEffect(() => {
        var _a;
        const targetElement = (_a = element === null || element === void 0 ? void 0 : element.current) !== null && _a !== void 0 ? _a : window;
        if (!(targetElement && targetElement.addEventListener))
            return () => { };
        const listener = event => savedHandler.current(event);
        targetElement.addEventListener(eventName, listener, options);
        return () => {
            targetElement.removeEventListener(eventName, listener, options);
        };
    }, [eventName, element, options]);
}

function useEventCallback(fn) {
    const ref = useRef(() => {
        throw new Error("cannot call an event handler while rendering");
    });
    useIsomorphicLayoutEffect(() => {
        ref.current = fn;
    }, [fn]);
    return useCallback((...args) => ref.current(...args), [ref]);
}

const parseJSON = (value) => {
    try {
        return value === "undefined" ? undefined : JSON.parse(value !== null && value !== void 0 ? value : "");
    }
    catch (_a) {
        return undefined;
    }
};
const useLocalStorage = (key, initialValue) => {
    const readValue = useCallback(() => {
        if (typeof window === "undefined") {
            return initialValue;
        }
        try {
            const item = window.localStorage.getItem(key);
            return item ? parseJSON(item) : initialValue;
        }
        catch (error) {
            return initialValue;
        }
    }, [initialValue, key]);
    const [storedValue, setStoredValue] = useState(readValue);
    const setValue = useEventCallback(value => {
        try {
            const newValue = value instanceof Function ? value(storedValue) : value;
            window.localStorage.setItem(key, JSON.stringify(newValue));
            setStoredValue(newValue);
            window.dispatchEvent(new Event("local-storage"));
        }
        catch (error) { }
    });
    useEffect(() => {
        setStoredValue(readValue());
    }, []);
    const handleStorageChange = useCallback((event) => {
        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    useEventListener("storage", handleStorageChange);
    useEventListener("local-storage", handleStorageChange);
    return [storedValue, setValue];
};

export { useEventCallback, useEventListener, useIsomorphicLayoutEffect, useLocalStorage };
//# sourceMappingURL=react-hooks.es5.js.map
