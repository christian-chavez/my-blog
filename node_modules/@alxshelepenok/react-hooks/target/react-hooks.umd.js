(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["react-hooks"] = {}, global.React));
})(this, (function (exports, react) { 'use strict';

    const useIsomorphicLayoutEffect = typeof window === "undefined" ? react.useEffect : react.useLayoutEffect;

    function useEventListener(eventName, handler, element, options) {
        const savedHandler = react.useRef(handler);
        useIsomorphicLayoutEffect(() => {
            savedHandler.current = handler;
        }, [handler]);
        react.useEffect(() => {
            var _a;
            const targetElement = (_a = element === null || element === void 0 ? void 0 : element.current) !== null && _a !== void 0 ? _a : window;
            if (!(targetElement && targetElement.addEventListener))
                return () => { };
            const listener = event => savedHandler.current(event);
            targetElement.addEventListener(eventName, listener, options);
            return () => {
                targetElement.removeEventListener(eventName, listener, options);
            };
        }, [eventName, element, options]);
    }

    function useEventCallback(fn) {
        const ref = react.useRef(() => {
            throw new Error("cannot call an event handler while rendering");
        });
        useIsomorphicLayoutEffect(() => {
            ref.current = fn;
        }, [fn]);
        return react.useCallback((...args) => ref.current(...args), [ref]);
    }

    const parseJSON = (value) => {
        try {
            return value === "undefined" ? undefined : JSON.parse(value !== null && value !== void 0 ? value : "");
        }
        catch (_a) {
            return undefined;
        }
    };
    const useLocalStorage = (key, initialValue) => {
        const readValue = react.useCallback(() => {
            if (typeof window === "undefined") {
                return initialValue;
            }
            try {
                const item = window.localStorage.getItem(key);
                return item ? parseJSON(item) : initialValue;
            }
            catch (error) {
                return initialValue;
            }
        }, [initialValue, key]);
        const [storedValue, setStoredValue] = react.useState(readValue);
        const setValue = useEventCallback(value => {
            try {
                const newValue = value instanceof Function ? value(storedValue) : value;
                window.localStorage.setItem(key, JSON.stringify(newValue));
                setStoredValue(newValue);
                window.dispatchEvent(new Event("local-storage"));
            }
            catch (error) { }
        });
        react.useEffect(() => {
            setStoredValue(readValue());
        }, []);
        const handleStorageChange = react.useCallback((event) => {
            if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
                return;
            }
            setStoredValue(readValue());
        }, [key, readValue]);
        useEventListener("storage", handleStorageChange);
        useEventListener("local-storage", handleStorageChange);
        return [storedValue, setValue];
    };

    exports.useEventCallback = useEventCallback;
    exports.useEventListener = useEventListener;
    exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
    exports.useLocalStorage = useLocalStorage;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=react-hooks.umd.js.map
