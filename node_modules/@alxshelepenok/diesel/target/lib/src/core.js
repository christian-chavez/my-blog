"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribeToCoilValueUpdates = exports.registerCoilValue = exports.createPublicSetCoilValue = exports.createPublicSetAtomValue = exports.createPublicGetCoilValue = exports.coreGetCoilValue = exports.generateCoilId = void 0;
const typings_1 = require("./typings");
const coilStores = {};
const getCoilStore = (coilId) => {
    coilStores[coilId] = coilStores[coilId] || {};
    return coilStores[coilId];
};
const currentCoilId = 0;
const generateCoilId = () => (currentCoilId + 1).toString();
exports.generateCoilId = generateCoilId;
const coreGetAtomValue = (coilId, atom) => {
    const coreCoilValue = getCoilStore(coilId)[atom.key];
    if (coreCoilValue.type !== "atom") {
        throw new Error(`${coreCoilValue.key} is not an atom`);
    }
    return coreCoilValue.value;
};
const coreGetSelectorValue = (coilId, selector) => selector.get({ get: (0, exports.createPublicGetCoilValue)(coilId) });
const coreGetCoilValue = (coilId, coilValue) => (0, typings_1.isAtom)(coilValue)
    ? coreGetAtomValue(coilId, coilValue)
    : coreGetSelectorValue(coilId, coilValue);
exports.coreGetCoilValue = coreGetCoilValue;
const createPublicGetCoilValue = (coilId) => (coilValue) => (0, exports.coreGetCoilValue)(coilId, coilValue);
exports.createPublicGetCoilValue = createPublicGetCoilValue;
const createPublicSetAtomValue = (coilId, coilValue) => (nextValue) => coreSetAtomValue(coilId, coilValue, nextValue);
exports.createPublicSetAtomValue = createPublicSetAtomValue;
const coreSetAtomValue = (coilId, coilValue, nextValue) => {
    const coreCoilValue = getCoilStore(coilId)[coilValue.key];
    if (coreCoilValue.type !== "atom") {
        throw new Error(`${coreCoilValue.key} is not an atom`);
    }
    if (nextValue !== coreCoilValue.value) {
        coreCoilValue.value = nextValue;
        coreCoilValue.subscribers.forEach(callback => callback());
    }
};
const createPublicSetCoilValue = (coilId) => (coilValue, nextValue) => coreSetCoilValue(coilId, coilValue, nextValue);
exports.createPublicSetCoilValue = createPublicSetCoilValue;
const coreSetCoilValue = (coilId, coilValue, nextValue) => {
    if ((0, typings_1.isAtom)(coilValue)) {
        coreSetAtomValue(coilId, coilValue, nextValue);
    }
    else if (coilValue.set) {
        coilValue.set({
            get: (0, exports.createPublicGetCoilValue)(coilId),
            set: (0, exports.createPublicSetCoilValue)(coilId),
        }, nextValue);
    }
};
const registerCoilValue = (coilId, coilValue) => {
    const { key } = coilValue;
    const coilStore = getCoilStore(coilId);
    if (coilStore[key]) {
        return;
    }
    if ((0, typings_1.isAtom)(coilValue)) {
        coilStore[key] = {
            default: coilValue.default,
            key,
            subscribers: [],
            type: "atom",
            value: coilValue.default,
        };
    }
    else {
        coilStore[key] = {
            key,
            subscribers: [],
            type: "selector",
        };
    }
};
exports.registerCoilValue = registerCoilValue;
const subscribeToCoilValueUpdates = (coilId, key, callback) => {
    const coilValue = getCoilStore(coilId)[key];
    const { subscribers } = coilValue;
    if (subscribers.includes(callback)) {
        throw new Error("Already subscribed to Coil Value");
    }
    subscribers.push(callback);
    return () => {
        subscribers.splice(subscribers.indexOf(callback), 1);
    };
};
exports.subscribeToCoilValueUpdates = subscribeToCoilValueUpdates;
//# sourceMappingURL=core.js.map