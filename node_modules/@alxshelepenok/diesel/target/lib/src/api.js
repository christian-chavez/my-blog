"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCoilState = exports.useCoilValue = exports.selector = exports.atom = void 0;
const react_1 = require("react");
const typings_1 = require("./typings");
const provider_1 = require("./provider");
const core_1 = require("./core");
const atom = (a) => a;
exports.atom = atom;
const selector = (s) => s;
exports.selector = selector;
const useCoilId = () => {
    const coilId = (0, react_1.useContext)(provider_1.CoilContext);
    if (!coilId) {
        throw new Error("Wrap your app with <CoilRoot>");
    }
    return coilId;
};
const createDependenciesSpy = (coilId, dependencies) => {
    const dependenciesSpy = (coilValue) => {
        dependencies.push(coilValue.key);
        if ((0, typings_1.isAtom)(coilValue)) {
            return (0, core_1.coreGetCoilValue)(coilId, coilValue);
        }
        return coilValue.get({ get: dependenciesSpy });
    };
    return dependenciesSpy;
};
const useSubscribeToCoilValues = (coilValue, callback) => {
    const coilId = useCoilId();
    (0, react_1.useEffect)(() => {
        if ((0, typings_1.isAtom)(coilValue)) {
            return (0, core_1.subscribeToCoilValueUpdates)(coilId, coilValue.key, callback);
        }
        const dependencies = [];
        coilValue.get({ get: createDependenciesSpy(coilId, dependencies) });
        const unsubscribes = [];
        dependencies.forEach(key => unsubscribes.push((0, core_1.subscribeToCoilValueUpdates)(coilId, key, callback)));
        return () => unsubscribes.forEach(unsubscribe => unsubscribe());
    }, [coilId, coilValue, callback]);
};
const useCoilValue = (coilValue) => {
    const coilId = useCoilId();
    const [, forceRender] = (0, react_1.useReducer)(s => s + 1, 0);
    (0, core_1.registerCoilValue)(coilId, coilValue);
    useSubscribeToCoilValues(coilValue, forceRender);
    return (0, core_1.coreGetCoilValue)(coilId, coilValue);
};
exports.useCoilValue = useCoilValue;
const useCoilState = (coilValue) => {
    const coilId = useCoilId();
    const currentValue = (0, exports.useCoilValue)(coilValue);
    const setter = (0, react_1.useMemo)(() => {
        if ((0, typings_1.isAtom)(coilValue)) {
            return (0, core_1.createPublicSetAtomValue)(coilId, coilValue);
        }
        return (nextValue) => {
            if (coilValue.set)
                coilValue.set({
                    get: (0, core_1.createPublicGetCoilValue)(coilId),
                    set: (0, core_1.createPublicSetCoilValue)(coilId),
                }, nextValue);
        };
    }, [coilId, coilValue]);
    return [currentValue, setter];
};
exports.useCoilState = useCoilState;
//# sourceMappingURL=api.js.map